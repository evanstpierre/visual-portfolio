services:
  next:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: next-dev
    ports:
      - "3000:3000"
    environment:
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      HOSTNAME: "0.0.0.0"
      NODE_ENV: "development"
      MONGO_URI: ${MONGO_URI}
      JWT_SECRET: ${JWT_SECRET}

       
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      mongo:
        condition: service_healthy
    restart: always
    networks: [app-net]
    command: ["npm", "run", "dev"]
  


  mongo:
    image: mongo:7
    container_name: mongo
    restart: always
    env_file:
      - .env
    environment:
      # Root (admin) user that the image creates
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: admin   # root user in admin

      # Pass app creds to your init.js (names are up to you)
      MONGO_APP_R_USER: ${MONGO_APP_R_USER}
      MONGO_APP_R_PASS: ${MONGO_APP_R_PASS}
      MONGO_APP_RW_USER: ${MONGO_APP_RW_USER}
      MONGO_APP_RW_PASS: ${MONGO_APP_RW_PASS}
      MONGO_DB: ${MONGO_DB}          # e.g., myapp
    volumes:
      - mongo_data:/data/db
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "27017:27017"
    networks: [app-net]

volumes:
  mongo_data:

networks:
  app-net:
    driver: bridge